// <auto-generated />
using System;
using BookInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookInfrastructure.Migrations
{
    [DbContext(typeof(BooksShopdatabaseContext))]
    partial class BooksShopdatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookDomain.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("authorName");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("authorAddress");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publisherName");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("PK__Book__447D36EB06A970C8");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BookId" }, "IX_Category");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.Customer", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Phone")
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.HasKey("Email")
                        .HasName("PK__Customer__A9D1053550F16F36");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customerEmail");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("text")
                        .HasColumnName("deliveryAddress");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("orderDate");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("orderStatus");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("ShoppingBasketId")
                        .HasColumnType("int")
                        .HasColumnName("shoppingBasketId");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id")
                        .HasName("PK__Order__4659622912A5D1BD");

                    b.HasIndex("CustomerEmail");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.HasKey("Id")
                        .HasName("PK_Order Details");

                    b.HasIndex("BookId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BookDomain.Model.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("paymentMethod");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("paymentStatus");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("transactionId");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__ED1FC9EAA0D365BD");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.ShoppingBasketBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<int>("ShoppingBasketId")
                        .HasColumnType("int")
                        .HasColumnName("shoppingBasketID");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ShoppingBasketId");

                    b.ToTable("ShoppingBasketBook", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.WarehouseBook", b =>
                {
                    b.Property<int>("WarehouseCode")
                        .HasColumnType("int")
                        .HasColumnName("warehouseCode");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("bookId");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.HasKey("WarehouseCode", "BookId")
                        .HasName("PK__Warehous__B56B0DC77A0EA844");

                    b.HasIndex("BookId");

                    b.ToTable("WarehouseBook", (string)null);
                });

            modelBuilder.Entity("ShoppingBasket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customerEmail");

                    b.HasKey("Id")
                        .HasName("PK__Shopping__3214EC2790DBB2AE");

                    b.HasIndex("CustomerEmail");

                    b.ToTable("ShoppingBasket", (string)null);
                });

            modelBuilder.Entity("BookDomain.Model.Category", b =>
                {
                    b.HasOne("BookDomain.Model.Book", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_Category_Book");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookDomain.Model.Order", b =>
                {
                    b.HasOne("BookDomain.Model.Customer", "CustomerEmailNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerEmail")
                        .HasConstraintName("FK__Order__customer___44FF419A");

                    b.Navigation("CustomerEmailNavigation");
                });

            modelBuilder.Entity("BookDomain.Model.OrderDetail", b =>
                {
                    b.HasOne("BookDomain.Model.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_Order Details_Book");

                    b.HasOne("BookDomain.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK_Order Details_Order");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookDomain.Model.Payment", b =>
                {
                    b.HasOne("BookDomain.Model.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__order_i__45F365D3");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookDomain.Model.ShoppingBasketBook", b =>
                {
                    b.HasOne("BookDomain.Model.Book", "Book")
                        .WithMany("ShoppingBasketBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingBasketBook_Book");

                    b.HasOne("ShoppingBasket", "ShoppingBasket")
                        .WithMany("ShoppingBasketBooks")
                        .HasForeignKey("ShoppingBasketId")
                        .IsRequired()
                        .HasConstraintName("FK__ShoppingB__Shopp__47DBAE45");

                    b.Navigation("Book");

                    b.Navigation("ShoppingBasket");
                });

            modelBuilder.Entity("BookDomain.Model.WarehouseBook", b =>
                {
                    b.HasOne("BookDomain.Model.Book", "Book")
                        .WithMany("WarehouseBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__Warehouse__BookI__4AB81AF0");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ShoppingBasket", b =>
                {
                    b.HasOne("BookDomain.Model.Customer", "CustomerEmailNavigation")
                        .WithMany("ShoppingBaskets")
                        .HasForeignKey("CustomerEmail")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__ShoppingB__Custo__46E78A0C");

                    b.Navigation("CustomerEmailNavigation");
                });

            modelBuilder.Entity("BookDomain.Model.Book", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("OrderDetails");

                    b.Navigation("ShoppingBasketBooks");

                    b.Navigation("WarehouseBooks");
                });

            modelBuilder.Entity("BookDomain.Model.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingBaskets");
                });

            modelBuilder.Entity("BookDomain.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ShoppingBasket", b =>
                {
                    b.Navigation("ShoppingBasketBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
